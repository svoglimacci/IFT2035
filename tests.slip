;;; Tests de typage                     -*- mode: lisp-data; coding: utf-8 -*-



; Expression a type "Tint" au lieu de: Tabs Tint Tint
; la fonction prend un argument Tint et non pas deux.

( (: (λ x (* x x))
        (Int -> (Int -> Int)))
    3)


; Erreur de type dans le if/then/else
; la fonction devrait retourner un Tint
; mais retourne Tbool

(: (let true false
  (if true 1 2)) Bool)                       ; ↝ 2 : Tint


; Expression a type "Tref Tint" au lieu de: Tint
; la fonction essaie d'additionner un Tref à un Tbool

(let c1 (ref! 5)
 (let c2 c1
  (begin (set! c2 6)
   (+ (c1) (get! c2)))))           ; ↝ 12 : Tint


; Expression a type "Tbool" au lieu de: Tint
; l'on essaie d'additionner deux Tbool.

(letrec ((a +)
         (s -))
  (letrec ((+ true)
           (- false))
    (a + -)))                           ; ↝ 3 : Tint


; Erreur de type dans la déclaration récursive
; la fonction tente d'additionner un Tbool à un Int.

(letrec ( ((odd (x Bool)) Bool  (if (= x 1) true (even (- x 1))))
          ((even (x Int)) Bool (if (= x 0) true (odd (- x 1)))))
(odd 7))                                ; ↝ True : Tbool


; Erreur de type dans la déclaration récursive
; La fonction ne contient aucun typage

 (letrec ((fib (λ n
                (if (= n 0) 0
                  (if (= n 1) 1
                    (+ (fib (- n 1)) (fib (- n 2))))))))
  (fib 7))



; Erreur de type dans l'assignation
; l'argument x est un Tint et non pas un Tref Tint. get! x renvoie la valeur
; de x et non pas sa référence.

(: (let x (ref! (: 5 (Ref Int) ))
  (set! x (* (get! x) (get! x)))
  (get! x)) (Ref Int))